// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullname  String?
  password  String
  isActive  Boolean  @default(false)
  level     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  completedLessons CompletedLessons[]
  lessonId String?
  challenge Challenge[]
  quizResults QuizResults[]
  codeReviews CodeReview[] @relation("CodeReviewer")
  codeReviewsCodeReviewer CodeReview[] @relation("CodeReviewerCodeReviewer")
  role Role @default(student)
  votes Vote[]

  otp Otp?
  topicEnrollments TopicEnrollment[]
  discussions Discussion[]
  comments    Comment[]
}

enum Role {
  admin
  student
  code_reviewer
}

model Otp {
  id     String   @id @default(cuid())
  userId String   @unique
  otp    Int
  limit  DateTime
  user   User     @relation(fields: [userId], references: [id])
}

model Lesson {
  id      String @id @default(cuid())
  number  Int
  title   String
  data    Json
  topicId String
  tags    String

  topic      Topic       @relation(fields: [topicId], references: [id])
  programmes Programme[]
  users      User[]
  completed CompletedLessons[]
  quiz       Quiz?
  topicEnrollment TopicEnrollment[]

  @@unique([topicId, number])
  @@map("lessons")
}

model CompletedLessons {
  userId String
  lessonId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@id([userId, lessonId])
}

model Topic {
  id      String   @id @default(cuid())
  number  Int
  title   String
  description String?
  icon   Json? @default("{\"path\": \"\", \"id\": \"\"}") // {path: string, id: string}
  image   Json? @default("{\"path\": \"\", \"id\": \"\"}") // {path: string, id: string}
  type    TopicType @default(optional)
  color   String @default("#0059FF")
  isRequired Boolean @default(false)

  dependencies Topic[] @relation("TopicDependencies")
  dependents Topic[] @relation("TopicDependencies")
  lessons Lesson[]
  programmes Programme[]
  finalQuiz Quiz?
  topicEnrollments TopicEnrollment[]

  @@map("topics")
}

enum TopicType {
  required
  optional
}

model TopicEnrollment {
  userId          String
  topicId         String
  completed       Boolean @default(false)
  currentLessonId String?
  level           Int @default(1)

  user User @relation(fields: [userId], references: [id])
  topic Topic @relation(fields: [topicId], references: [id])
  currentLesson Lesson? @relation(fields: [currentLessonId], references: [id])

  @@id([userId, topicId])
  @@map("topic_enrollments") 
}

model Programme {
  id          String @id @default(cuid())
  type        String
  title       String
  description String @db.LongText

  points      Int?
  requiredLvl Int? @map("required_lvl")

  lessonId String?
  topicId String?

  code String @db.LongText
  goal String

  lesson Lesson? @relation(fields: [lessonId], references: [id])
  topic Topic? @relation(fields: [topicId], references: [id])
  challenge Challenge[]
  reviews CodeReview[]

  @@map("programmes")
}

model Challenge {
  userId String
  programmeId String

  user User @relation(fields: [userId], references: [id])
  programme Programme @relation(fields: [programmeId], references: [id])

  @@id([userId, programmeId])
  @@map("challenges")
}

// Quizzes

model Quiz {
  id        String     @id @default(cuid())
  type      QuizType   @default(miniQuiz)
  questions Question[]

  topicId  String? @unique
  lessonId String? @unique

  topic  Topic?  @relation(fields: [topicId], references: [id])
  lesson Lesson? @relation(fields: [lessonId], references: [id])
  quizResults QuizResults[]

  @@map("Quizzes")
}

model Question {
  id       String @id @default(cuid())
  question String
  choices  Json
  correct  Int // Strart from 0
  tags     Json // ['variables, 'lists']
  time     Int?
  quizId   String

  quiz Quiz @relation(fields: [quizId], references: [id])

  @@map("Questions")
}

enum QuizType {
  finalQuiz
  miniQuiz
}

model QuizResults {
  userId     String
  quizId     String
  statistics Json
  percent    Int
  lastAttempt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])

  @@id([userId, quizId])
  @@map("quiz-results")
}

// Teachers

model CodeReview {
  id String @id @default(cuid())
  userId String
  reviewerId String?
  subject String
  explication String
  code String @db.LongText
  programmeId String?
  createdAt DateTime @default(now())
  comments Json @default("[]") // [{ sender: 'student' | 'reviewer', message: string }]

  user User @relation(name: "CodeReviewer", fields: [userId], references: [id])
  reviewer User? @relation(name: "CodeReviewerCodeReviewer", fields: [reviewerId], references: [id])
  challenge Programme? @relation(fields: [programmeId], references: [id])

  @@map("code_reviews")
}

model Discussion {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.LongText
  votes     Vote[]
  tags      Json     // ["JavaScript", "React", etc]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isUpdated Boolean  @default(false)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comments  Comment[]
}

model Vote {
  userId       String
  discussionId String

  discussion Discussion @relation(fields: [discussionId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([userId, discussionId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.LongText
  createdAt DateTime @default(now())

  userId       String
  discussionId String
  user         User       @relation(fields: [userId], references: [id])
  discussion   Discussion @relation(fields: [discussionId], references: [id])
}